<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
	">



	<import resource="./test.xml" />



	<bean id="baseAction" class="struts.action.BaseAction"
		scope="prototype">

	</bean>



	<!-- 数据源配置 （如果配置在hibernate.cfg.xml中事务不自动提交） -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver">
		</property>
		<property name="url"
			value="jdbc:oracle:thin:@192.168.1.2:1521:orcl">
		</property>
		<property name="username" value="ztstation"></property>
		<property name="password" value="ztstation"></property>
	</bean>

	<!-- 使用JNDI连接方式的数据源 -->
	<!--  <bean id="dataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
		<value>java:comp/env/jdbc/ztstation</value>
		</property>
		</bean>
	-->


	<!-- hibernate 的　sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">

		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.Oracle9Dialect
				</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>

		</property>
		<!-- 引入hibernate配置文件中的反向类 -->
		<property name="configLocation"
			value="classpath:hibernate.cfg.xml">
		</property>
	</bean>

	<!-- 配置hibernate 的事务管理 -->
	<!--
		使用HibernateTransactionManager类，该类是PlatformTransactionManager接口针对
		Hibernate持久化连接的特定实现
	-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!-- 需要依赖注入一个SessionFactory Bean的引用 -->
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!-- 定义事务拦截器bean -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!-- 事务拦截器 bean 需要依赖注入一个事务管理器 -->
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<!-- 定义事务传播性 -->
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!--
		定义一个BeanPostProcessor bean ,Spring
		提供BeanPostProcessor的实现类BeanNameAutoProxyCreator
	-->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<!-- 指定对满足哪些bean name的bean 自动生成业务代理 -->
		<property name="beanNames">
			<!-- 此处还可以列出更多的需要生成事务代理的目标bean -->
			<ref local="personDAO"/>
			<!-- 有一上需要生成事务代理的目标bean,这里就增加一行 -->
		</property>
		<!-- 下面定义BeanNameAutoProxyCreator所需要的拦截器 -->
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
				<!-- 此处还可以增加其他新的Interceptor -->
			</list>
		</property>

	</bean>



	<!-- 使用DataSourceTransactionManager类，该类是PlatformTransactionManager接口 -->
	<!-- 针对采用数据源连接的特定实现（仅针对jdbc的事务配置,这里不使用）  -->
	<!--
		<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		
		<property name="dataSource"> <ref bean="dataSource" /> </property>
		</bean>
	-->




	<!-- 通用 service 和 DAO -->
	<bean id="baseDAO" class="service.impl.BaseDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>


	<bean id="personDAO" class="hibernate.pojo.PersonDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
</beans>